// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

extern crate protobuf;

use self::protobuf::Message as Message_imported_for_functions;
use self::protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Touchpad {
    // message fields
    pub action: Action,
    pub x: ::std::vec::Vec<f64>,
    pub y: ::std::vec::Vec<f64>,
    pub eventTime: i64,
    pub downTime: i64,
    // special fields
    pub unknown_fields: self::protobuf::UnknownFields,
    pub cached_size: self::protobuf::CachedSize,
}

impl Touchpad {
    pub fn new() -> Touchpad {
        ::std::default::Default::default()
    }

    // .Action action = 1;

    pub fn clear_action(&mut self) {
        self.action = Action::NONE;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: Action) {
        self.action = v;
    }

    pub fn get_action(&self) -> Action {
        self.action
    }

    // repeated double x = 2;

    pub fn clear_x(&mut self) {
        self.x.clear();
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: ::std::vec::Vec<f64>) {
        self.x = v;
    }

    // Mutable pointer to the field.
    pub fn mut_x(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.x
    }

    // Take field
    pub fn take_x(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.x, ::std::vec::Vec::new())
    }

    pub fn get_x(&self) -> &[f64] {
        &self.x
    }

    // repeated double y = 3;

    pub fn clear_y(&mut self) {
        self.y.clear();
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: ::std::vec::Vec<f64>) {
        self.y = v;
    }

    // Mutable pointer to the field.
    pub fn mut_y(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.y
    }

    // Take field
    pub fn take_y(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.y, ::std::vec::Vec::new())
    }

    pub fn get_y(&self) -> &[f64] {
        &self.y
    }

    // int64 eventTime = 4;

    pub fn clear_eventTime(&mut self) {
        self.eventTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_eventTime(&mut self, v: i64) {
        self.eventTime = v;
    }

    pub fn get_eventTime(&self) -> i64 {
        self.eventTime
    }

    // int64 downTime = 5;

    pub fn clear_downTime(&mut self) {
        self.downTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_downTime(&mut self, v: i64) {
        self.downTime = v;
    }

    pub fn get_downTime(&self) -> i64 {
        self.downTime
    }
}

impl self::protobuf::Message for Touchpad {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut self::protobuf::CodedInputStream) -> self::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    self::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 1, &mut self.unknown_fields)?
                },
                2 => {
                    self::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.x)?;
                },
                3 => {
                    self::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.y)?;
                },
                4 => {
                    if wire_type != self::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(self::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.eventTime = tmp;
                },
                5 => {
                    if wire_type != self::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(self::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.downTime = tmp;
                },
                _ => {
                    self::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action != Action::NONE {
            my_size += self::protobuf::rt::enum_size(1, self.action);
        }
        my_size += 9 * self.x.len() as u32;
        my_size += 9 * self.y.len() as u32;
        if self.eventTime != 0 {
            my_size += self::protobuf::rt::value_size(4, self.eventTime, self::protobuf::wire_format::WireTypeVarint);
        }
        if self.downTime != 0 {
            my_size += self::protobuf::rt::value_size(5, self.downTime, self::protobuf::wire_format::WireTypeVarint);
        }
        my_size += self::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut self::protobuf::CodedOutputStream) -> self::protobuf::ProtobufResult<()> {
        if self.action != Action::NONE {
            os.write_enum(1, self.action.value())?;
        }
        for v in &self.x {
            os.write_double(2, *v)?;
        };
        for v in &self.y {
            os.write_double(3, *v)?;
        };
        if self.eventTime != 0 {
            os.write_int64(4, self.eventTime)?;
        }
        if self.downTime != 0 {
            os.write_int64(5, self.downTime)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &self::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut self::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static self::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Touchpad {
        Touchpad::new()
    }

    fn descriptor_static() -> &'static self::protobuf::reflect::MessageDescriptor {
        static mut descriptor: self::protobuf::lazy::Lazy<self::protobuf::reflect::MessageDescriptor> = self::protobuf::lazy::Lazy {
            lock: self::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const self::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(self::protobuf::reflect::accessor::make_simple_field_accessor::<_, self::protobuf::types::ProtobufTypeEnum<Action>>(
                    "action",
                    |m: &Touchpad| { &m.action },
                    |m: &mut Touchpad| { &mut m.action },
                ));
                fields.push(self::protobuf::reflect::accessor::make_vec_accessor::<_, self::protobuf::types::ProtobufTypeDouble>(
                    "x",
                    |m: &Touchpad| { &m.x },
                    |m: &mut Touchpad| { &mut m.x },
                ));
                fields.push(self::protobuf::reflect::accessor::make_vec_accessor::<_, self::protobuf::types::ProtobufTypeDouble>(
                    "y",
                    |m: &Touchpad| { &m.y },
                    |m: &mut Touchpad| { &mut m.y },
                ));
                fields.push(self::protobuf::reflect::accessor::make_simple_field_accessor::<_, self::protobuf::types::ProtobufTypeInt64>(
                    "eventTime",
                    |m: &Touchpad| { &m.eventTime },
                    |m: &mut Touchpad| { &mut m.eventTime },
                ));
                fields.push(self::protobuf::reflect::accessor::make_simple_field_accessor::<_, self::protobuf::types::ProtobufTypeInt64>(
                    "downTime",
                    |m: &Touchpad| { &m.downTime },
                    |m: &mut Touchpad| { &mut m.downTime },
                ));
                self::protobuf::reflect::MessageDescriptor::new::<Touchpad>(
                    "Touchpad",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Touchpad {
        static mut instance: self::protobuf::lazy::Lazy<Touchpad> = self::protobuf::lazy::Lazy {
            lock: self::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Touchpad,
        };
        unsafe {
            instance.get(Touchpad::new)
        }
    }
}

impl self::protobuf::Clear for Touchpad {
    fn clear(&mut self) {
        self.clear_action();
        self.clear_x();
        self.clear_y();
        self.clear_eventTime();
        self.clear_downTime();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Touchpad {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        self::protobuf::text_format::fmt(self, f)
    }
}

impl self::protobuf::reflect::ProtobufValue for Touchpad {
    fn as_ref(&self) -> self::protobuf::reflect::ProtobufValueRef {
        self::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Action {
    NONE = 0,
    DOWN = 1,
    UP = 2,
    MOVE = 3,
}

impl self::protobuf::ProtobufEnum for Action {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Action> {
        match value {
            0 => ::std::option::Option::Some(Action::NONE),
            1 => ::std::option::Option::Some(Action::DOWN),
            2 => ::std::option::Option::Some(Action::UP),
            3 => ::std::option::Option::Some(Action::MOVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Action] = &[
            Action::NONE,
            Action::DOWN,
            Action::UP,
            Action::MOVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static self::protobuf::reflect::EnumDescriptor {
        static mut descriptor: self::protobuf::lazy::Lazy<self::protobuf::reflect::EnumDescriptor> = self::protobuf::lazy::Lazy {
            lock: self::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const self::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                self::protobuf::reflect::EnumDescriptor::new("Action", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Action {
}

impl ::std::default::Default for Action {
    fn default() -> Self {
        Action::NONE
    }
}

impl self::protobuf::reflect::ProtobufValue for Action {
    fn as_ref(&self) -> self::protobuf::reflect::ProtobufValueRef {
        self::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0etouchpad.proto\x12\0\"r\n\x08Touchpad\x12\x1b\n\x06action\x18\x01\
    \x20\x01(\x0e2\x07.ActionB\x02\x18\0\x12\r\n\x01x\x18\x02\x20\x03(\x01B\
    \x02\x18\0\x12\r\n\x01y\x18\x03\x20\x03(\x01B\x02\x18\0\x12\x15\n\tevent\
    Time\x18\x04\x20\x01(\x03B\x02\x18\0\x12\x14\n\x08downTime\x18\x05\x20\
    \x01(\x03B\x02\x18\0*2\n\x06Action\x12\x08\n\x04NONE\x10\0\x12\x08\n\x04\
    DOWN\x10\x01\x12\x06\n\x02UP\x10\x02\x12\x08\n\x04MOVE\x10\x03\x1a\x02\
    \x10\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: self::protobuf::lazy::Lazy<self::protobuf::descriptor::FileDescriptorProto> = self::protobuf::lazy::Lazy {
    lock: self::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const self::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> self::protobuf::descriptor::FileDescriptorProto {
    self::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static self::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
